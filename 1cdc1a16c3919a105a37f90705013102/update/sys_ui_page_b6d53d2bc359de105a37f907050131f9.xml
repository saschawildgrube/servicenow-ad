<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script/>
        <description/>
        <direct>false</direct>
        <endpoint>x_snc_ad_manual.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
<div style="padding-left: 20px;">
<span style="visibility: hidden;">_CUT_HERE_</span>
	<g2:no_escape>$[
		var docapi = new x_snc_devtools.DocumentationAPI('x_snc_ad');
		docapi.RenderHeader();
	]</g2:no_escape>
	
	<p>Welcome to the ArtificialDeveloper app! - created and maintained by&#160;<a href="mailto:sascha.wildgrube@servicenow.com">Sascha Wildgrube</a>.</p>

	<h2>Overview</h2> 
	<g2:no_escape>$[
		docapi.RenderDescription();
	]</g2:no_escape>
	
	<h2>Test-Driven Code Generation</h2> 
	<p>LLMs have made considerable progress since ChatGPT was made available to the public for the first time. And the quality of generated code improved greatly. But yet, the created code by far does not yet meet production standards and is not fit-for-purpose in many cases.</p>
	<p>The core challenge is that code - in order to function properly - must be an expression of an algorithmic idea - and not the random summary of something that someone (or something) read before. The latter may be the starting point, but it is not sufficient for a final version.</p>
	<p>Whether tests are written as code or executed manually by a developer, in most cases a (human) developer runs in cycles of building a hypothesis, then writing code, testing the resulting program and analyzing the result of the test - and then starts over.</p>
	<p>Test-Driven Development is the practice of automating parts of that cycle by writing test code early in the process and shorten the feedback loop between the hypothesis and the analysis, allowing for greater productivity and more robust results.</p>
	<p>When the quality of generated code is assessed, we compare apples and oranges. Generated code usually results from a single prompt, containing a description of the requirement, eventually the current version of the code. Do we really expect AI to deliver a result that is comparable to what an experienced human developer would provide after running through the cycle several times? Is that fair?</p>
	<p>The more relevant questions are: are we asking AI the right way? Do we make the best use of the technology?</p>
	<p>Test-Driven Code Generation (also referred to as "Test-Driven Generation" or "TDG") is to integrate the generative power of AI in the same procedure that the human developer would go through. Where Test-Driven Development automates the testing part in the cycle, Test-Driven Code Generation aims at automating the part where code is actually written.</p>
	<ol>
	<li>Human writes boilerplate code and describes the outcome.</li>
	<li>Human writes a test.</li>
	<li>The test is run.</li>
	<li>If the test passes, end here or return to step 2 to add more test cases.</li>
	<li>If the test fails, ask AI to implement the code based on the description, the interface, the current version of the code, the test code and the latest test results.</li>
	<li>Return to step 3.</li>
	</ol>
	<p>As of now, the Artificial Developer app supports Test-Driven Code generation for Script Includes only. As there are no built-in references between Script Includes and ATF Tests, the app assumes a naming convention that requires an ATF test to be called after the app the Script Include is contained in, then a dash, then the name of the Script Include. E.g.: "Artificial Developer - TestDrivenCodeGeneration".</p> 
	<p>For disambiguation: The term "Test-Driven Generation" has sometimes been used to describe the process of creating test cases (not the code to fit these tests) using AI. However, more recent publications use the term consistently for for code (not test) generation.</p>

	<h2>Developer Efficiency Gains</h2>
	<p>The big question is: what to expect from AI augmented coding? As always, the answer is: it depends.</p>
	<p>It depends on the LLM, the specific prompt and the difficulty of the problem to be solved. To make reasonable statements about solution quality, the following problem taxonomy is proposed:</p>
	
	<p><b>Class 1 Problems</b></p>
	<p>These are low complexity non-domain specific problems, where many fit-for-purpose solutions are available on public sources. Solutions do not depend on additional data sources or the system environment. Resulting code delivers fully deterministic results.</p>
	<p>Examples are simple math problems (linear algebra, geometry, Newton physics) like calculating the volume of bodies or gravitational vectors, or well-known algorithms like sorting or searching.</p>
	
	<p><b>Class 2 Problems</b></p>
	<p>These are high complexity non-domain specific problems or low complexity domain specific problems. Solutions are available on public sources, but not all of them are fit-for-purpose.</p>
	<p>Examples are complex math problems with partially non-deterministic results, optimization problems, data validation that require implicit knowledge (e.g. emails, urls, ISINs, IBANs), problems that require data retrieval via database interfaces or REST APIs, low complexity domain-specific problems that involve ServiceNow specific APIs like retrieving records based on filter criteria.</p>	
	
	<p><b>Class 3 Problems</b></p>
	<p>These are high complexity domain specific problems. Fit-for-purpose solutions are not available on public sources or are difficult to find due to varying terminology or context.</p>
	<p>An example is to retrieve an API token from a ServiceNow connection alias and then to use it with a REST API that requires multiple requests to perform a task.</p>	

	<p>As of now - at the time of the release of this application version - Test-Driven Code Generation using GTP4 works very well for class 1 problems, works most of the time for class 2 problems but fails on class 3 problems - although provides code that can serve as a basis for further manual work.</p>
	<p>As the Test-Driven Code generation approach requires developers to split capabilities into functions and produce automated tests, the efficiency gain for class 1 problems may be neglectable but for class 2 problems it can be significant. One could argue though that enforcing the refactoring of code into Script Include functions and creation of automated tests is per se a design pattern that saves costs on the long run. As a result, the adoption of TDG and hence indirectly adopting TDD already represents an efficiency gain - even if a particular problem cannot be fully solved through TDG.</p>
	
	
	<h2>Disclaimer</h2>
	<g2:no_escape>$[docapi.RenderDisclaimer()]</g2:no_escape>	
	
	<h2>System Requirements</h2>
	<ul>
		<g2:no_escape>$[
			docapi.RenderSystemRequirements(
				'Xanadu',
				true,
				AppGetDependencies());
		]</g2:no_escape>	
	</ul>
	
	<h2>Installation</h2>
	<ol>
		<li>Navigate to&#160;<a href="/now/app-manager/home/" target="_blank">Plugins</a></li>
		<li>Click button "Sync with Store"</li>
		<li>Search for&#160;<a href="/now/app-manager/home/app/id/8178fec0ce0431105a7c9305875b2dca" target="_blank">Now Assist for Creator</a></li>
		<li>Install "Now Assist for Creator"</li>
		<li>Navigate to the&#160;<a href="/nav_to.do?uri=sys_one_extend_capability.do?sys_id=0c90ca79533121106b38ddeeff7b12d7" target="_blank">Generic Prompt Capability</a></li>
		<li>Select the related list "OneExtend Definition Configs".</li>
		<li>Set the preferred LLM as the default.</li>
		<li>Open the OneExtend Capability Definition.</li>
		<li>Open the Connection and Credential Alias.</li>
		<li>Select "Create Connection and Credential" and add authentication credentials if not done already.</li>
		<g2:no_escape>$[
			docapi.RenderInstallationInstructionsImportFromSourceControl(
				'DevTools',
				'https://github.com/saschawildgrube/servicenow-devtools',
				true,
				'https://www.wildgrube.com/servicenow-devtools/');
		]</g2:no_escape>
		<g2:no_escape>$[
			docapi.RenderInstallationInstructionsImportFromSourceControl(
				'ArtificialDeveloper',
				'https://github.com/saschawildgrube/servicenow-ad');
		]</g2:no_escape>		
		<g2:no_escape>$[
			docapi.RenderInstallationInstructionsAppInstall();
		]</g2:no_escape>	
		<li>Assign the "x_snc_ad.developer" role to users who should have access to the "Test-Driven Code Generation" capability.</li>	
	</ol>
	
	<h2>Reference</h2>

	<h3>Configuration Options</h3>
	<g2:no_escape>$[docapi.RenderProperties()]</g2:no_escape>
	
	<h3>Roles</h3>
	<g2:no_escape>$[docapi.RenderRoles()]</g2:no_escape>		

	<h3>UI Actions</h3>
	<g2:no_escape>$[docapi.RenderUIActions()]</g2:no_escape>		
	
	<h3>Script Includes</h3>
	<g2:no_escape>$[docapi.RenderScriptIncludes()]</g2:no_escape>

	<h3>Dependencies</h3>
	<g2:no_escape>$[docapi.RenderDependencies()]</g2:no_escape>		

	<h3>Technical Debts</h3>
	<g2:no_escape>$[docapi.RenderTechnicalDebts()]</g2:no_escape>			
	
	<h2>License</h2>
	<g2:no_escape>$[docapi.RenderCopyright(2024,'Sascha Wildgrube')]</g2:no_escape>
	<g2:no_escape>$[docapi.RenderLicense()]</g2:no_escape>
	
	<h2>Release Notes</h2>

	<h3>1.1.0 - 2024-11-10</h3>
	<ol>
		<li>Now also supports responses provided by NowLLM Mixtral.</li>
		<li>Minor prompt improvements.</li>
		<li>Added chapter on Developer Efficiency Gains and problem classes to the manual.</li>
	</ol>


	<h3>1.0.1 - 2024-11-03</h3>
	<ol>
		<li>Updated wording in manual and app description.</li>
	</ol>


	<h3>1.0.0 - 2024-11-02</h3>
	<p>First baselined version</p>

<span style="visibility: hidden;">_CUT_HERE_</span>
</div>
</j:jelly>]]></html>
        <name>manual</name>
        <processing_script/>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-10-23 09:30:58</sys_created_on>
        <sys_id>b6d53d2bc359de105a37f907050131f9</sys_id>
        <sys_mod_count>33</sys_mod_count>
        <sys_name>manual</sys_name>
        <sys_package display_value="ArtificialDeveloper" source="x_snc_ad">1cdc1a16c3919a105a37f90705013102</sys_package>
        <sys_policy/>
        <sys_scope display_value="ArtificialDeveloper">1cdc1a16c3919a105a37f90705013102</sys_scope>
        <sys_update_name>sys_ui_page_b6d53d2bc359de105a37f907050131f9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-10 15:28:05</sys_updated_on>
    </sys_ui_page>
</record_update>
